#!/usr/bin/env python3

# TODO: Find a better name

# TODO: check if file with name exists first (in sequential) if not rename
# TODO: add --force to force rename all again


import os
import random
import string
import argparse
import pathlib


class Args_list:
    def __init__(self, args) -> None:
        self.random_names = args.random_names
        self.sequential = args.sequential
        self.name_before = args.name_before
        self.directory = args.directory
        self.quiet = args.quiet
        self.gen_test = args.gen_test


def get_random_string(length):
    letters = string.ascii_lowercase + string.ascii_uppercase
    result_str = "".join(random.choice(letters) for _ in range(length))
    return result_str


def dir_path(path):
    if os.path.isdir(path):
        return path
    else:
        raise argparse.ArgumentTypeError(f"readable_dir:{path} is not a valid path")


def rename_with_random_names():
    """Rename all files with random names to stop os.rename from deleting files"""
    for filename in [f for f in os.listdir() if os.path.isfile(f)]:
        file_extenion = None
        random_name = get_random_string(12)

        if "." in filename:
            file_extenion = filename.split(".").pop()

        if file_extenion:
            dst = f"{random_name}.{file_extenion}"
        else:
            dst = f"{random_name}"

        os.rename(filename, dst)


def sequential_rename(args: Args_list):
    count = 1
    for filename in [f for f in os.listdir() if os.path.isfile(f)]:
        file_extenion = None

        if "." in filename:
            file_extenion = filename.split(".").pop()

        if file_extenion:
            dst = f"{count}.{file_extenion}"
        else:
            dst = f"{count}"

        if args.name_before:
            dst = f"{args.name_before}{dst}"

        os.rename(filename, dst)
        if not args.quiet:
            print(f"{filename} -> {dst}")
        count += 1


def generate_random_files(number_of_files):
    for _ in range(0, number_of_files):
        random_file_name = get_random_string(12)

        file = pathlib.Path(random_file_name)
        file.touch(exist_ok=True)

    print(f"Generated {number_of_files} file/s!")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-r",
        "--random-names",
        help="Rename files with randomly generated names",
        action="store_true",
    )
    parser.add_argument(
        "-s", "--sequential", help="Rename files in sequence", action="store_true"
    )
    parser.add_argument(
        "-n", "--name-before", help="text before number in sequential rename", type=str
    )
    parser.add_argument(
        "-d", "--directory", help="Specify a directory", default=".", type=dir_path
    )
    parser.add_argument("-q", "--quiet", help="No output", action="store_true")
    parser.add_argument(
        "-g",
        "--gen-test",
        help="generate a random list of files for testing",
        nargs="?",
        type=int,
    )

    args = parser.parse_args()
    args = Args_list(args)

    cwd = os.getcwd()
    path = f"{cwd}/{args.directory}"
    os.chdir(path)

    if args.gen_test:
        generate_random_files(args.gen_test)
    elif args.random_names:
        rename_with_random_names()
    elif args.sequential:
        # running rename_with_random_names first
        # because runnin qeuential_rename
        # only may cause some files be lost
        rename_with_random_names()
        sequential_rename(args)


if __name__ == "__main__":
    main()
