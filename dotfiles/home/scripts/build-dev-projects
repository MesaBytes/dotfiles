#!/bin/env python

import os
import requests
import argparse

skip_repos = ["awesome-config", "nvim-config"]
dest_dir = "Development"


class Repo:
    id: int
    name: str
    private: bool
    html_url: str
    description: str
    fork: bool
    created_at: str
    updated_at: str
    pushed_at: str
    size: int
    language: str
    default_branch: str

    def __init__(self, item: dict):
        self.id = item["id"]
        self.name = item["name"]
        self.private = item["private"]
        self.html_url = item["html_url"]
        self.description = item["description"]
        self.fork = item["fork"]
        self.created_at = item["created_at"]
        self.updated_at = item["updated_at"]
        self.pushed_at = item["pushed_at"]
        self.size = item["size"]
        self.language = item["language"]
        self.default_branch = item["default_branch"]


def get_token():
    git_credentials = os.path.expanduser("~/.git-credentials")

    if os.path.exists(git_credentials):
        with open(git_credentials, "r") as f:
            line = f.readline()
            token = line.split("@")[0].split(":")[2]

            return token
    else:
        token = input("Token: ")

        return token


def main():
    parser = argparse.ArgumentParser(
        prog="build-dev-projects",
        description="Clone all projects from a GitHub user",
    )

    parser.add_argument("-u", "--username", action="store", required=False)

    args = parser.parse_args()

    username = args.username or input("Username: ")
    token = get_token()

    req = requests.get(
        f"https://api.github.com/search/repositories?q=user:{username}&per_page=1000",
        headers={"Authorization": f"token {token}"},
    )

    data = req.json()

    total_count = data["total_count"]
    incomplete_results = data["incomplete_results"]
    items = data["items"]

    print(f"Total count: {total_count}")
    print(f"Incomplete results: {incomplete_results}")
    print(f"Items: {len(items)}")
    print("-----------------------------------\n")

    continue_confirm = input("Do you want to continue? (Y/n): ") or "y"

    if continue_confirm.lower() != "y":
        exit(0)

    if os.path.exists(dest_dir):
        print(f"Directory '{dest_dir}' already exists!")
        overwirte_confirm = input("overwrite? (Y/n): ") or "y"

        if overwirte_confirm.lower() != "y":
            exit(0)
        else:
            print(f"Removing old dest directory ({dest_dir}).....")
            os.rmdir(dest_dir)

    print(f"Creating dest directory ({dest_dir}).....")
    os.mkdir(dest_dir)

    for index, item in enumerate(items):
        repo = Repo(item)
        dest = os.path.join(dest_dir, repo.name)

        if repo.name in skip_repos:
            print(f"Skipping {repo.name}.....")
            print("")
            continue

        print("-" * 15, f" {repo.name} ({index + 1}/{len(items)}) ", "-" * 15)
        os.system(f"git clone {repo.html_url} {dest}")
        print("")


if __name__ == "__main__":
    main()
